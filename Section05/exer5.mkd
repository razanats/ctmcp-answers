# 5. Parallel filters

	declare
	proc {NewPortClose ?S ?Send ?Close}
		PC={NewCell S}
	in
		proc {Send M}
			S in
			{Exchange PC M|S S}
		end
		proc {Close}
			nil=@PC
		end
	end

	proc {ConcFilter L F ?L2}
		Send Close
	in
		{NewPortClose L2 Send Close}
		{Barrier 
			{Map L
				fun {$ X}
					proc {$}
						if {F X} then {Send X} end
					end
				end}}
		{Close}
	end
	
## (a) What happens when you do the following?

	declare Out
	{ConcFilter [5 1 2 4 0] fun {$ X} X>2 end Out}
	{Show Out}

It is displayed as `[5 4]`. Note that according to the meaning of Chapter 5, the Send operation is serial, so the ConcFilter does not exit before the message is received. ConcFilter is non-deterministic because it executes in parallel, and can be displayed as `[5 4]` or `[4 5]`.

## (b) What happens when you do the following?

	declare Out
	{ConcFilter [5 1 2 4 0] fun {$ X} X>2 end Out}
	{Delay 1000}
	{Show Out}

Same as above because ConcFilter blocks until all threads are finished.

## (c) What happens when you do the following?

	declare Out A
	{ConcFilter [5 1 A 4 0] fun {$ X} X>2 end Out}
	{Delay 1000}
	{Show Out}

ConcFilter does not display anything because all threads are (ry). If you bind A=3, it will be displayed as `[5 4 3]`.

## (d) What is the amount of calculation of the execution count of ConcFilter for the number n of elements in the input list? What is the difference with Filter?

The number of executions is O(n).

About the difference between ConcFilter and Filter. If Filter blocks with an element in the list, it will not be calculated after that until it is cleared, whereas ConcFilter will calculate all the elements that can be calculated. ConcFilter has more total computational resources to use because threads are used, but if the list is long enough because processing may block during processing, ConcFilter is better as execution time.

