Introduction of explicit state and various things accompanying it.

* The point
** System construction principle
The principle of system construction is abstraction. To perform abstraction means to consider the specification and implementation separately. By being able to concentrate on the specifications, it becomes possible to build more complex things based on them. It means that the system can be constructed as a series of layers towards the center.

System components are components. Introducing states allows a component to have "memory". It can be said that "knowledge" can be injected into components. Unlike the components in the declarative model, where all that can be done is externalized as "arguments", stateful components can be "grown".

　As we have already seen, by adding concurrency to the declarative model, it becomes possible to have "memory" seen from a certain aspect. That is the stream object and port object. Realization of states by concurrency has the advantage that, unlike the introduction of explicit states, each part of the program does not have a total order dependency. From another perspective, it can be said that explicit states allow components to have "memory" without introducing concurrency.

** explicit state
First, define the state again as follows. Note that we are paying attention not only to the input and output of the calculation but also to the middle of it.

= State is a time series of values, including the required intermediate calculation results. =

Motives for introducing explicit states are as described above. Add a new storage called value storage to the calculation model.

This is to introduce the concept of "container" and "assignment", whereby values ​​become time series and "states" surface. (If we take an abstract position, the explicit state means that the "value" pointed to by one "identifier" is replaced with another "value", and the "value" itself changes. Not that. The concept of "assignment" or "container" does not appear there.)

** Need for data abstraction
Introducing state means that each part of the program is programmable so that the state visible to another part can be changed freely. Such programs are very hard to reason. Therefore, state is useful to use with encapsulation. This makes it possible to make inferences independently.

▽ Encapsulation is nothing but the use of procedures with data. It suffices to know the abstract type of data and the operations on it. Object-oriented programming emerges as a development of this useful form.

** About the limits of the calculation model in this chapter
Since the calculation model (including object-oriented programming) in this chapter is serial, it is not possible to model the actual concurrency well. One solution to such problems is the message transmission parallel model, which we saw in the previous chapter. We will see another state-sharing concurrency model later.

* Impression
Why do we need to introduce explicit states in our declarative model? Why is explicit state guided to object orientation?

There are plenty of independent explanations of the good things about functional and object-oriented, but it's hard to explain in comparison to other computational models and the motivation for one model to incorporate another, and that's what this book does. It was nice to be there. So I focused on that point. The actual contents are not limited to the above abstract story, but from the handling of components when designing a large-scale system to the handling of dependency information, how to proceed with development, etc. is there.

　I also found it interesting that, because I have already seen all the possible techniques on the declarative model, there is nothing essential to explain just by introducing explicit state. C is often assumed to have an explicit state as a simple programming language that explains the basics of the technique (there is an image of it), but in reality, many of them are based on a simpler computational model. Got the understanding.

* Practice problem
It's getting eaten.
https://github.com/Altech/ctmcp-answers/
