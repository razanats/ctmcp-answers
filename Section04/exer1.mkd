# Meaning of thread

	local B in
		thread B=true end
		thread B=false end
		if B then {Browse yes} end
	end

## (a)
1.`local B in <s> end`
2.`thread <s> end`
3.`thread <s> end`
4.`if B then <s> end` 
5.`{Browse yes}`
6.`B=true`
7.`B=false`

And

* Execution order in the same thread
* Causal order due to block and thread generation
* Exception due to unification failure

Considering, the possible executions are as follows.

* 1,2,3,6,4,5,7
* 1,2,3,6,4,7
* 1,2,3,6,7
* 1,2,3,7,4,5,6
* 1,2,3,7,4,6
* 1,2,3,7,6
* 1,2,6,3,4,5,7
* 1,2,6,3,4,7
* 1,2,6,3,7

### notes
If you generalize the problem, you can solve it by feeling that you can make all kinds of executions by generating clauses in list comprehension notation and add constraints appropriately as guard clauses.

* `I<Ii` for the thread creation statement I and the first execution Ii of the statement
* `Ii<..<Ij` for executions Ii,..,Ij in the same thread
* `I> min(Ia,..)` for the execution I that makes an identifier A an activation condition and the operation Ia,.. that binds A

It seems like it's good If you consider exceptions including unification failure, you have to step into the execution (meaning) of the program in the execution order, so you can do smart.

## (b)
`B=true` etc.
