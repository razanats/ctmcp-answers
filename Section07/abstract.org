* CTMCP Chapter 7: Object Oriented Programming
About abstracts built on a computational model that introduces explicit states and their uses. In particular, its meaning definition, the relationship between abstract design decisions and other calculation models, and cautions regarding usage.

** The point
In the previous chapter, we saw that the complexity that increases due to the introduction of explicit states should be suppressed by encapsulation using data abstraction. In the data abstraction, we use the style of an object in which values ​​and their operations are combined. This provides polymorphism. Moreover, object-oriented programming allows incremental construction by adding the concept of inheritance.

▽ Inheritance is a concept that has great power but needs to be used with extreme caution. The chances of squeezing out common parts increases, but at the same time, the implementation of an interface is scattered throughout the program. Also, when understanding an object, its ancestors must be considered together, which may make it difficult to understand the program, maintain the design, and debug.

Addition in object-oriented is not on the calculation model. A class is a kind of higher-order programming that can be thought of as a function that returns a value that wraps a set of values ​​and operations, and inheritance as a function that outputs a class with the class as an input. Therefore, the addition of object-oriented programming is rather a decoration of how to design the abstract and incorporate it in the syntax (it is from the viewpoint of the calculation model, and the implementation is optimized). Consider).

There are two ways to view inheritance: one is to see it as a type, and the other is to see it as a structure. In most cases, it should be seen as a mold. This includes that the class should satisfy the substitution property. The fact that class B (extends A) satisfies substitutability means that operations that can be performed on A can also be performed on B and satisfy its basic assertion.

** Impressions
　It was good that I was able to eliminate the jump I felt between so-called procedural programming that used explicit state obediently and object-oriented programming. Assuming that C is like Java as an example of adding procedural object orientation, it is 1) addition of first-class function, 2) addition of security concept by name value, etc., in addition to simple decoration. I think there was a mix of changes at a more fundamental level, which was the reason why I felt the jump.

Oz is a dynamic language, and since messages (method calls) to classes and objects are first-class, reflection and delegation can be implemented naturally. It's close to Ruby in a widely used language. The reason why the statically typed languages ​​that compile C++, Java, etc. do not support first-class messages (C++) or have polymorphism restrictions are reasons for performance or program guarantee. I think Ruby is good from the perspective of purely understanding object orientation (Stema).
